#NOTE: ANG SULOD NI TRAIN.TXT AND VAL.TXT
#IS THE LOCATION SA E-TRAIN NGA MGA PICTURES 
#AND ANG KAY VAL IS KATUNG E-VALIDATE NA MGA PICS

#sulod ni val.txt original
data/custom/images/train.jpg

#sulod ni train.txt original
data/custom/images/train.jpg

#sulod ni test.txt original
data/custom/images/train.jpg

STEPS TO REMEMEMBER 
1. Clone the Repo for YOLOv4 Pytorch Envi
2. Install requirements 
3. Download and get ready the pre-trained weights.
4. Use the COCO-Detection yolov4.yaml
5. Create custom data | OPEN data> custom.yaml > edit file, the directories of the train and val.
    train: ../alldata/images/train/  
    val: ../alldata/images/val/ 
6. Create train.txt and val.txt that corresponds to the directory of to be trained images and to be validated images
using script.
-> OPEN scripts> create_data_list.py> *edit path* > do it 2x, for train and val
7. Train. | python train.py --config-file configs/COCO-Detection/yolov4.yaml --data data/custom.yaml --weights yolov4.conv.137.pth

--------------------------------------------------------
NORMAL TRAINING 
Training with transfer learning â€“ Configuration and hyperparameter settings
1. Clone alexyab repo
2. Change Makefile to enable GPU
3. Download pretrained model yolov4.conv.137
4. Create obj.data
	classes = 29
	train = build/darknet/x64/data/train.txt
	valid = build/data/darknet/valid.txt
	names = build/darknet/x64/data/obj.names
	backup = build/darknet/x64/backup
5. Create configuration file for training the model on our images. Alter few hyperparameters.
	-max_batches = 58000
	-46400, 52200
	-number of classes = 29
	-filters(#classes+5)x3 = 102; has to be the last convolutional before
		each of the yolo layers
6. Create obj.names - object classes per row
COMMAND:
!./darknet detector train build/darknet/x64/data/obj.data cfg/yolov4_train.cfg build/darknet/x64/yolov4.conv.137 -dont_show
